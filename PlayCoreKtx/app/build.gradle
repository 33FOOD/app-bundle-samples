/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    // STOPSHIP
    // TODO remove before publishing sample
    id 'com.github.triplet.play' version '2.7.2'
}
android {

    compileSdkVersion versions.compileSdk

    defaultConfig {
        applicationId names.applicationId
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding = true
    }

    buildTypes {
        debug {}
        release {
            minifyEnabled true
        }
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    dynamicFeatures = [':features:picture', ':features:randomcolor']

    kotlinOptions {
        freeCompilerArgs += "-Xuse-experimental=kotlin.Experimental"
    }
}

// STOPSHIP
// TODO remove before publishing sample
play {
    serviceAccountCredentials = file("../../play-key.json")
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    api "androidx.appcompat:appcompat:${versions.appcompat}"
    api "androidx.activity:activity:${versions.activity}"
    api "androidx.fragment:fragment-ktx:${versions.fragment}"
    api 'androidx.constraintlayout:constraintlayout:1.1.3'
    api 'com.google.android.material:material:1.1.0'

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"

    implementation "com.google.android.play:core:${versions.playcore}"
    implementation "com.google.android.play:core-ktx:${versions.playcore_ktx}"

    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycle}"
}

def bundletoolJar = new File(project.rootDir, "third_party/bundletool/bundletool-all-0.13.3.jar")

android.applicationVariants.all { variant ->
    variant.outputs.each { apkOutput ->
        def filePath = apkOutput.outputFile.absolutePath
        def indexOfLast = filePath.lastIndexOf(".") + 1
        filePath = filePath.substring(0, indexOfLast) + "aab"
        filePath = filePath.replace("build/outputs/apk/", "build/outputs/bundle/")
        def outputPath = filePath.replace("build/outputs/bundle/", "build/outputs/apks/")
        indexOfLast = outputPath.lastIndexOf(".") + 1
        outputPath = outputPath.substring(0, indexOfLast) + "apks"

        tasks.register("buildApks${variant.name.capitalize()}", JavaExec) {
            classpath = files(bundletoolJar)
            args "build-apks", "--overwrite", "--local-testing", "--bundle", filePath, "--output", outputPath
            dependsOn("bundle${variant.name.capitalize()}")
        }

        tasks.register("installApkSplitsForTest${variant.name.capitalize()}", JavaExec) {
            classpath = files(bundletoolJar)
            args "install-apks", "--apks", outputPath
            dependsOn("buildApks${variant.name.capitalize()}")
        }
    }
}

// From ktlint getting started guide
configurations {
    ktlint
}

dependencies {
    ktlint "com.pinterest:ktlint:0.35.0"
}

task ktlint(type: JavaExec, group: "cleanup") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "cleanup") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}